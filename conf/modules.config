/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: SAMPLESHEET_CHECK {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: FASTQC {
        tag = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc_raw/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: FASTQC_PROCESSED {
        tag = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/preprocessing/fastqc_processed/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: FALCO {
        tag = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/falco_raw/" },
            mode: params.publish_dir_mode,
        ]

    }

    withName: FALCO_PROCESSED {
        tag = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args = '--quiet'
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        publishDir = [
            path: { "${params.outdir}/preprocessing/falco_processed/" },
            mode: params.publish_dir_mode,
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    withName: GUNZIP_FASTA {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.f*',
            enabled: params.save_reference
        ]
    }

    withName: SAMTOOLS_FAIDX {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.fai',
            enabled: params.save_reference
        ]
    }

    withName: PICARD_CREATESEQUENCEDICTIONARY {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: '*.dict',
            enabled: params.save_reference
        ]
    }

    withName: BOWTIE2_BUILD {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: 'bowtie2',
            enabled: params.save_reference
        ]
    }

    withName: BWA_INDEX {
        publishDir = [
            path: { "${params.outdir}/reference/${meta.id}/" },
            mode: params.publish_dir_mode,
            pattern: 'bwa',
            enabled: params.save_reference
        ]
    }

    withName: FASTP_SINGLE {
        tag = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args   = [
            // TRIMMING OPTIONS
            params.preprocessing_trim5p != 0 ? "--trim_front1 ${params.preprocessing_trim5p}" : "",
            params.preprocessing_trim3p != 0 ? "--trim_tail1 ${params.preprocessing_trim3p}" : "",
            params.preprocessing_skipadaptertrim ? "--disable_adapter_trimming" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter1 ? "--adapter_sequence ${params.preprocessing_adapter1}" : "",  // adding adapter list happens at module input channel level
            // FILTERING OPTIONS
            "--length_required ${params.preprocessing_minlength}",
            params.preprocessing_fastp_complexityfilter ? "--low_complexity_filter --complexity_threshold ${params.preprocessing_fastp_complexityfilter_threshold}" : ""
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.preprocessing_savepreprocessedreads
            ],
            [
                path: { "${params.outdir}/preprocessing" },
                mode: params.publish_dir_mode,
                pattern: '*.{log,html,json}'
            ]
        ]
    }

    withName: FASTP_PAIRED {
        tag = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args   = [
            // COLLAPSING OPTIONS - option to retain singletons
            params.preprocessing_excludeunmerged ? "" : "--include_unmerged",
            // TRIMMING OPTIONS
            params.preprocessing_trim5p != 0 ? "--trim_front1 ${params.preprocessing_trim5p} --trim_front2 ${params.preprocessing_trim5p}" : "",
            params.preprocessing_trim3p != 0 ? "--trim_tail1 ${params.preprocessing_trim3p} --trim_tail2 ${params.preprocessing_trim3p}" : "",
            params.preprocessing_skipadaptertrim ? "--disable_adapter_trimming" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter1 ? "--adapter_sequence ${params.preprocessing_adapter1}" : "",  // adding adapter list happens at module input channel level
            params.preprocessing_skipadaptertrim ? "" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter2 ? "--adapter_sequence_r2 ${params.preprocessing_adapter2}" : "",  // adding adapter list happens at module input channel level
            // FILTERING OPTIONS--disable_adapter_trimming
            "--length_required ${params.preprocessing_minlength}",
            params.preprocessing_fastp_complexityfilter ? "--low_complexity_filter --complexity_threshold ${params.preprocessing_fastp_complexityfilter_threshold}" : ""
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.preprocessing_savepreprocessedreads
            ],
            [
                path: { "${params.outdir}/preprocessing" },
                mode: params.publish_dir_mode,
                pattern: '*.{log,html,json}'
            ]
        ]
    }

    withName: ADAPTERREMOVAL_SINGLE {
        tag = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args   = [
            // trimming options - note: adding adapter list happens at module input channel level
            params.preprocessing_skipadaptertrim ? "--adapter1 ''" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter1 ? "--adapter1 ${params.preprocessing_adapter1}" : "", // adding adapter list happens at module input channel level
            params.preprocessing_skipadaptertrim ? "--adapter2 ''" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter2 ? "--adapter2 ${params.preprocessing_adapter2}" : "",
            "--minadapteroverlap ${params.preprocessing_adapterremoval_adapteroverlap}",
            params.preprocessing_adapterremoval_preserve5p ? "--preserve5p" : "",
            params.preprocessing_trim5p != 0 ? "--trim5p ${params.preprocessing_trim5p}" : "",
            params.preprocessing_trim3p != 0 ? "--trim3p ${params.preprocessing_trim3p}" : "",
            !params.preprocessing_adapterremoval_skipqualitytrimming ? "--trimqualities --minquality ${params.preprocessing_adapterremoval_trimbasequalitymin}" : "",
            !params.preprocessing_adapterremoval_skipntrimming ? "--trimns" : "",
            "--qualitymax ${params.preprocessing_adapterremoval_qualitymax}",
            // filtering options
            "--minlength ${params.preprocessing_minlength}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.preprocessing_savepreprocessedreads
            ],
            [
                path: { "${params.outdir}/preprocessing" },
                mode: params.publish_dir_mode,
                pattern: '*.settings'
            ]
        ]
    }

    withName: ADAPTERREMOVAL_PAIRED {
        tag = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args   = [
            // COLLAPSING OPTIONS
            params.preprocessing_skippairmerging ? "" : "--collapse",
            // TRIMMING OPTIONS  - note: adding adapter list happens at module input channel level
            params.preprocessing_skipadaptertrim ? "--adapter1 ''" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter1 ? "--adapter1 ${params.preprocessing_adapter1}" : "",
            params.preprocessing_skipadaptertrim ? "--adapter2 ''" : params.preprocessing_adapterlist ? "" : params.preprocessing_adapter2 ? "--adapter2 ${params.preprocessing_adapter2}" : "",
            "--minadapteroverlap ${params.preprocessing_adapterremoval_adapteroverlap}",
            params.preprocessing_adapterremoval_preserve5p ? "--preserve5p" : "",
            params.preprocessing_trim5p != 0 ? "--trim5p ${params.preprocessing_trim5p}" : "",
            params.preprocessing_trim3p != 0 ? "--trim3p ${params.preprocessing_trim3p}" : "",
            !params.preprocessing_adapterremoval_skipqualitytrimming ? "--trimqualities --minquality ${params.preprocessing_adapterremoval_trimbasequalitymin}" : "",
            !params.preprocessing_adapterremoval_skipntrimming ? "--trimns" : "",
            "--qualitymax ${params.preprocessing_adapterremoval_qualitymax}",
            // FILTERING OPTIONS
            "--minlength ${params.preprocessing_minlength}"
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.lane}" }
        publishDir = [
            [
                path: { "${params.outdir}/preprocessing" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.preprocessing_savepreprocessedreads
            ],
            [
                path: { "${params.outdir}/preprocessing" },
                mode: params.publish_dir_mode,
                pattern: '*.settings'
            ]
        ]
    }

    withName: CAT_FASTQ_ADAPTERREMOVAL {
        tag = { "${meta.sample_id}_${meta.library_id}_${meta.lane}_${meta.reference}" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.lane}_${meta.reference}" }
        publishDir = [
                path: { "${params.outdir}/preprocessing" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.preprocessing_savepreprocessedreads
            ]
    }

    withName: 'CAT_FASTQ_UNMAPPED|CAT_FASTQ_MAPPED' {
        tag = { "${meta.sample_id}_${meta.library_id}_${meta.reference}" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.reference}" }
        publishDir = [
                path: { "${params.outdir}/preprocessing" },
                mode: params.publish_dir_mode,
                pattern: '*.fastq.gz',
                enabled: params.preprocessing_savepreprocessedreads
            ]
    }

    withName: BWA_ALN {
        tag = { "${meta.reference}|${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args = { "-n ${params.mapping_bwaaln_n} -k ${params.mapping_bwaaln_k} -l ${params.mapping_bwaaln_l} -o ${params.mapping_bwaaln_o}" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.lane}_${meta.reference}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'BWA_SAMSE|BWA_SAMPE' {
        tag = { "${meta.reference}|${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args = { "-r '@RG\\tID:ILLUMINA-${meta.library_id}\\tSM:${meta.sample_id}\\tPL:illumina\\tPU:ILLUMINA-${meta.library_id}-${meta.strandedness}'" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.lane}_${meta.reference}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*MAP:FASTQ_ALIGN_BWAALN:SAMTOOLS_INDEX" {
        tag = { "${meta.reference}|${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args = { params.fasta_largeref ? "-c" : "" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.lane}_${meta.reference}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: BWA_MEM {
        tag = { "${meta.reference}|${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args = { "-k ${params.mapping_bwamem_k} -r ${params.mapping_bwamem_r}" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.lane}_${meta.reference}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: BOWTIE2_ALIGN {
        tag = { "${meta.reference}|${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args = {[ "-N ${params.mapping_bowtie2_n}",
        "-L ${params.mapping_bowtie2_l}",
        "--trim5 ${params.mapping_bowtie2_trim5}",
        "--trim3 ${params.mapping_bowtie2_trim3}",
        "--maxins ${params.mapping_bowtie2_maxins}",
        "--rg-id ILLUMINA-${meta.library_id}",
        "--rg SM:${meta.sample_id}",
        "--rg PL:illumina",
        "--rg PU:ILLUMINA-${meta.library_id}-${meta.strandedness}",
        "${params.mapping_bowtie2_alignmode}" == 'local' ? "--local --${params.mapping_bowtie2_sensitivity}-local" : ( "${params.mapping_bowtie2_alignmode}" == 'end-to-end' ? "--end-to-end --${params.mapping_bowtie2_sensitivity}" : "" )
        ].join(' ').trim()}
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.lane}_${meta.reference}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: 'SAMTOOLS_INDEX_MEM|SAMTOOLS_INDEX_BT2' {
        tag = { "${meta.reference}|${meta.id}_${meta.library_id}_${meta.lane}" }
        ext.args = { params.fasta_largeref ? "-c" : "" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.lane}_${meta.reference}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*MAP:SAMTOOLS_MERGE" {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.reference}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*MAP:SAMTOOLS_SORT" {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.reference}_sorted" }
        publishDir = [
            path: { "${params.outdir}/mapping/" },
            mode: params.publish_dir_mode,
            pattern: '*.{bam}'
        ]
    }

    withName: "SAMTOOLS_INDEX_MERGE" {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args = { params.fasta_largeref ? "-c" : "" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.reference}" }
        publishDir = [
            path: { "${params.outdir}/mapping/" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}'
        ]
    }

    withName: SAMTOOLS_FLAGSTAT_MAPPED {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.reference}" }
        publishDir = [
            path: { "${params.outdir}/mapping/" },
            mode: params.publish_dir_mode,
            pattern: '*.flagstat'
        ]
    }

    withName: FILTER_BAM_FRAGMENT_LENGTH {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args = "-l ${params.bamfiltering_minreadlength}"
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.reference}" }
        publishDir = [
            path: { "${params.outdir}/bam_filtering/" },
            mode: params.publish_dir_mode,
            pattern: '*.filtered.bam',
            enabled: params.bamfiltering_savefilteredbams
        ]
    }

    withName: SAMTOOLS_FASTQ_UNMAPPED {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args = [
            '-f 4',
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}_unmapped" }
        publishDir = [
            path: { "${params.outdir}/bam_filtering/" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.bamfiltering_generateunmappedfastq
        ]
    }

    withName: SAMTOOLS_VIEW {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args = [
            "-q ${params.bamfiltering_mappingquality}",
            params.bamfiltering_retainunmappedgenomicbam ? '' : "-F ${params.bamfilter_genomicbamfilterflag}",
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}_filtered" }
        publishDir = [
            path: { "${params.outdir}/bam_filtering/" },
            mode: params.publish_dir_mode,
            pattern: '*.bam',
            enabled: params.bamfiltering_savefilteredbams
        ]
    }

    withName: 'SAMTOOLS_LENGTH_FILTER_INDEX|SAMTOOLS_FILTER_INDEX' {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args = { params.fasta_largeref ? "-c" : "" }
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}_filtered" }
        publishDir = [
            path: { "${params.outdir}/bam_filtering/" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}'
        ]
    }

    withName: SAMTOOLS_FASTQ_MAPPED {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args = [
            params.metagenomicscreening_input == 'all' ? '' : '-F 4',
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}_mapped" }
        publishDir = [
            path: { "${params.outdir}/bam_filtering/" },
            mode: params.publish_dir_mode,
            pattern: '*.fastq.gz',
            enabled: params.bamfiltering_generatemappedfastq
        ]
    }

    withName: SAMTOOLS_FLAGSTAT_FILTERED {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}" }
        publishDir = [
            path: { "${params.outdir}/bam_filtering/" },
            mode: params.publish_dir_mode,
            pattern: '*.flagstat'
        ]
    }

    withName: PICARD_MARKDUPLICATES {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}_${meta.genomic_region}_MarkDuplicates" }
        ext.args = [
            "--REMOVE_DUPLICATES",
            "--VALIDATION_STRINGENCY SILENT",
            "--ASSUME_SORTED"
        ].join(' ').trim()
        publishDir = [
            enabled: false
        ]
    }

    withName: HOST_REMOVAL {
        ext.args= {[
            "-m ${params.host_removal_mode}",
            "${meta_fastqs.single_end}" == false && "${params.preprocessing_skippairmerging}" == false ? "-merged" : ""
        ].join(' ').trim()}
        publishDir = [
            path: { "${params.outdir}/host_removal/" },
            mode: params.publish_dir_mode,
            pattern: '*.fq.gz'
            ]
    }


    withName: DEDUP {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args = "--merged"
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}_${meta.genomic_region}_DeDup" }
        publishDir = [
            enabled: false
        ]
    }

    withName: "SAMTOOLS_MERGE" {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_${meta.reference}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: PRESEQ_CCURVE {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args = "-B -s ${params.mapstats_preseq_stepsize}"
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}" }
        publishDir = [
            path: { "${params.outdir}/mapstats/preseq" },
            mode: params.publish_dir_mode
        ]
    }

    withName: PRESEQ_LCEXTRAP {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args   = [
            "-B",
            "-s ${params.mapstats_preseq_stepsize}",
            "-e ${params.mapstats_preseq_maxextrap}",
            "-x ${params.mapstats_preseq_terms}",
            "-n ${params.mapstats_preseq_bootstrap}",
            "-c ${params.mapstats_preseq_cval}",
            params.mapstats_preseq_defects_mode ? '-D' : ''
        ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}" }
        publishDir = [
            path: { "${params.outdir}/mapstats/preseq" },
            mode: params.publish_dir_mode
        ]
    }

    withName: ".*DEDUPLICATE:BUILD_INTERVALS" {
        publishDir = [
            enabled: false
        ]
    }

    withName: ".*BAM_SPLIT_BY_REGION:SAMTOOLS_INDEX" {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}_dedupped" }
        ext.args = { params.fasta_largeref ? "-c" : "" }
        publishDir = [
            path: { "${params.outdir}/deduplication/" },
            mode: params.publish_dir_mode,
            pattern: '*.bai'
        ]
    }

    withName: ".*DEDUPLICATE:SAMTOOLS_SORT" {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}_dedupped" }
        publishDir = [
            path: { "${params.outdir}/deduplication/" },
            mode: params.publish_dir_mode,
            pattern: '*.bam'
        ]
    }

    withName: ".*DEDUPLICATE:SAMTOOLS_INDEX" {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}_dedupped" }
        ext.args = { params.fasta_largeref ? "-c" : "" }
        publishDir = [
            path: { "${params.outdir}/deduplication/" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}'
        ]
    }

    withName: ".*DEDUPLICATE:SAMTOOLS_FLAGSTAT" {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.id}_${meta.library_id}_${meta.reference}_dedupped" }
        publishDir = [
            path: { "${params.outdir}/deduplication/" },
            mode: params.publish_dir_mode,
            pattern: '*.flagstat'
        ]
    }

    withName: MAPDAMAGE2 {
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_rescaled" }
        ext.args = { [
            "--rescale",
            // "--rescale-out=${task.ext.prefix}.bam", // This doesn't work, because the output is expected to be in the mapdamage results dir.
            "--seq-length=${params.damage_manipulation_rescale_seqlength}",
            params.damage_manipulation_rescale_length_3p != 0 ? "--rescale-length-3p=${params.damage_manipulation_rescale_length_3p}" : "",
            params.damage_manipulation_rescale_length_5p != 0 ? "--rescale-length-5p=${params.damage_manipulation_rescale_length_5p}" : "",
            { meta.strandedness } == "single" ? '--single-stranded' : ''
        ].join(' ').trim() }
        publishDir = [
            [
                path: { "${params.outdir}/damage_manipulation/" },
                mode: params.publish_dir_mode,
                pattern: 'result*/*.rescaled.bam',
                saveAs: { "${meta.sample_id}_${meta.library_id}_rescaled.bam" } // Needed to save the bam directly in the output dir instead of within the mapdamage results dir.
            ],
            [
                path: { "${params.outdir}/damage_manipulation/" },
                mode: params.publish_dir_mode,
                pattern: 'results_*/Stats_out_MCMC_*'
            ]
        ]
    }

    withName: SAMTOOLS_INDEX_DAMAGE_RESCALED {
        ext.args = { params.fasta_largeref ? "-c" : "" }
        publishDir = [
            path: { "${params.outdir}/damage_manipulation/" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}',
            saveAs: { "${meta.sample_id}_${meta.library_id}_rescaled.bam.bai" } // ext.prefix cannot be used here, so rename for publishing instead.
        ]
    }

    withName: PMDTOOLS_FILTER {
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_pmdfiltered" }
        ext.args2 = {[
            "${meta.damage_treatment}" == 'none' ? '--UDGminus' : "${meta.damage_treatment}" == 'half' ? '--UDGhalf' : '--UDGplus' ,
            "${meta.strandedness}" == 'single' ? '--ss' : ''
        ].join(' ').trim()}
        ext.args3 = { "-h" }
        publishDir = [
            path: { "${params.outdir}/damage_manipulation/" },
            mode: params.publish_dir_mode,
            pattern: '*_pmdfiltered.bam'
        ]
    }

    withName: SAMTOOLS_INDEX_DAMAGE_FILTERED {
        ext.args = { params.fasta_largeref ? "-c" : "" }
        publishDir = [
            path: { "${params.outdir}/damage_manipulation/" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}'
        ]
    }

    withName: SAMTOOLS_FLAGSTAT_DAMAGE_FILTERED {
        ext.prefix = { "${meta.sample_id}_${meta.library_id}_pmdfiltered" }
        publishDir = [
            path: { "${params.outdir}/damage_manipulation/" },
            mode: params.publish_dir_mode,
            pattern: '*.flagstat'
        ]
    }

    withName: BAMUTIL_TRIMBAM {
        ext.prefix = { params.run_pmd_filtering ? "${meta.sample_id}_${meta.library_id}_pmdfiltered_trimmed" : "${meta.sample_id}_${meta.library_id}_trimmed" }
        ext.args = [
            params.damage_manipulation_bamutils_softclip ? '-c' : ''
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/damage_manipulation/" },
            mode: params.publish_dir_mode,
            pattern: '*_trimmed.bam'
        ]
    }

    withName: SAMTOOLS_INDEX_DAMAGE_TRIMMED {
        ext.args = { params.fasta_largeref ? "-c" : "" }
        publishDir = [
            path: { "${params.outdir}/damage_manipulation/" },
            mode: params.publish_dir_mode,
            pattern: '*.{bai,csi}'
            ]
    }

    withName: ANGSD_DOCOUNTS {
        ext.args = [
            "-iCounts 1",
            "-r ${params.contamination_estimation_angsd_chrom_name}:${params.contamination_estimation_angsd_range_from}-${params.contamination_estimation_angsd_range_to}",
            "-minMapQ ${params.contamination_estimation_angsd_mapq}",
            "-minQ ${params.contamination_estimation_angsd_minq}"
        ].join(' ').trim()
        publishDir = [
            enabled: false
        ]
    }

    withName: ANGSD_CONTAMINATION {
        publishDir = [
            path: { "${params.outdir}/contamination_estimation/angsd/"},
            mode: params.publish_dir_mode,
            pattern: '*.txt'
        ]
    }

    withName: PRINT_CONTAMINATION_ANGSD {
        publishDir = [
            path: { "${params.outdir}/contamination_estimation/angsd/"},
            mode: params.publish_dir_mode,
            pattern: 'nuclear_contamination*'
        ]
    }

    withName: PRINSEQPLUSPLUS {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args =  [
                params.metagenomics_prinseq_mode == 'dust' ? "-lc_dust=${params.metagenomics_prinseq_dustscore}" : "-lc_entropy=${params.metagenomics_complexity_entropy}",
                "-trim_qual_left=0 -trim_qual_left=0 -trim_qual_window=0 -trim_qual_step=0",
            ].join(' ').trim()
        ext.prefix = { "${meta.id}_${meta.library_id}_complexity" }
        publishDir = [
            [
                path: { "${params.outdir}/metagenomic_complexity_filter/" },
                mode: params.publish_dir_mode,
                pattern: '*{_good_out.fastq.gz,_good_out_R1.fastq.gz,_good_out_R2.fastq.gz,log}',
                enabled: params.metagenomics_complexity_savefastq
            ]
        ]
    }

    withName: ".*BBMAP_BBDUK" {
        tag = { "${meta.reference}|${meta.id}" }
        ext.prefix = { "${meta.id}_${meta.library_id}_complexity" }
        ext.args = { "entropymask=f entropy=${params.metagenomics_complexity_entropy}" }
        publishDir = [
            path: { "${params.outdir}/metagenomic_complexity_filter/" },
            mode: params.publish_dir_mode,
            pattern: '*.{fastq.gz,log}',
            enabled: params.metagenomics_complexity_savefastq
        ]
    }

    withName: MTNUCRATIO {
        tag = { "${meta.reference}|${meta.id}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: "DAMAGEPROFILER" {
        tag = { "${meta.reference}|${meta.id}" }
        ext.args   = [
            "-l ${params.damageprofiler_length}",
            "-t ${params.damageprofiler_threshold}",
            "-yaxis_dp_max ${params.damageprofiler_yaxis}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/damage_estimation/damageprofiler/" },
            mode: params.publish_dir_mode,
            enabled: true
        ]
    }

    withName: "QUALIMAP_BAMQC" {
        publishDir = [
            path: { "${params.outdir}/qualimap/" },
            mode: params.publish_dir_mode,
            enabled: true
        ]
    }
}
